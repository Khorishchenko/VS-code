#include <iostream>

// Урок №157. Наследование и cпецификатор доступа protected

class Parent
{
public:
    int m_public; // доступ к этому члену открыт для всех объектов
private:
    int m_private; // доступ к этому члену открыт только для других членов класса Parent и для дружественных классов/функций (но не для дочерних классов)
protected:
    int m_protected; // доступ к этому члену открыт для других членов класса Parent, дружественных классов/функций, дочерних классов
};
 
class Child: public Parent
{
public:
    Child()
    {
        m_public = 1; // разрешено: доступ к открытым членам родительского класса из дочернего класса
        m_private = 2; // запрещено: доступ к закрытым членам родительского класса из дочернего класса
        m_protected = 3; // разрешено: доступ к защищенным членам родительского класса из дочернего класса
    }
};
 
int main()
{
    Parent parent;
    parent.m_public = 1; // разрешено: доступ к открытым членам класса извне
    parent.m_private = 2; // запрещено: доступ к закрытым членам класса извне
    parent.m_protected = 3; // запрещено: доступ к защищенным членам класса извне
}


//--------------------------------------------------------------------------------------------------------------------------------------//


// Открытое наследование
class Pub: public Parent
{
};
 
// Закрытое наследование
class Pri: private Parent
{
};
 
// Защищенное наследование
class Pro: protected Parent
{
};
 
class Def: Parent// по умолчанию язык C++ устанавливает закрытое наследование
{
};



class Parent
{
public:
    int m_public;
private:
    int m_private;
protected:
    int m_protected;
};
 
class Pub: public Parent // открытое наследование
{
    // Открытое наследование означает, что:
    // - public-члены остаются public в дочернем классе;
    // - protected-члены остаются protected в дочернем классе;
    // - private-члены остаются недоступными в дочернем классе.
public:
    Pub()
    {
        m_public = 1; // разрешено: доступ к m_public открыт
        m_private = 2; // запрещено: доступ к m_private в дочернем классе из родительского класса закрыт
        m_protected = 3; // разрешено: доступ к m_protected в дочернем классе из родительского класса открыт
    }
};
 
int main()
{
    Parent parent;
    parent.m_public = 1; // разрешено: m_public доступен извне через родительский класс
    parent.m_private = 2; // запрещено: m_private недоступен извне через родительский класс
    parent.m_protected = 3; // запрещено: m_protected недоступен извне через родительский класс
 
    Pub pub;
    pub.m_public = 1; // разрешено: m_public доступен извне через дочерний класс
    pub.m_private = 2; // запрещено: m_private недоступен извне через дочерний класс
    pub.m_protected = 3; // запрещено: m_protected недоступен извне через дочерний класс
}

// Правило: Используйте открытое наследование, если у вас нет веских причин делать иначе.

